plugins {
    id 'com.palantir.docker' version '0.25.0'
    id 'org.jetbrains.kotlin.jvm' version '1.5.30'
    id 'application'
}

ext {
    sharedDir                       = file("${project.rootDir}/shared")
    sailfishVersion                 = '3.2.1741'
}

group = 'com.exactpro.th2'
version = release_version

repositories {
    maven {
        name 'MavenLocal'
        url sharedDir
    }
    
    mavenCentral()

    maven {
        name 'Sonatype_snapshots'
        url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
    }

    maven {
        name 'Sonatype_releases'
        url 'https://s01.oss.sonatype.org/content/repositories/releases/'
    }

    mavenLocal()

    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
        resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
    }
}

jar {
    manifest {
        attributes(
            'Created-By':               "${System.getProperty('java.version')} (${System.getProperty('java.vendor')})",
            'Specification-Title':      '',
            'Specification-Vendor':     'Exactpro Systems LLC',
            'Implementation-Title':     project.archivesBaseName,
            'Implementation-Vendor':    'Exactpro Systems LLC',
            'Implementation-Vendor-Id': 'com.exactpro',
            'Implementation-Version':   project.version
        )
    }
}

sourceCompatibility = 11
targetCompatibility = 11

compileKotlin {
    kotlinOptions.jvmTarget = "11"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "11"
}

dependencies {
    api platform('com.exactpro.th2:bom:3.0.0')

    implementation 'com.exactpro.th2:common:3.42.0'
    implementation "com.exactpro.th2:sailfish-utils:3.8.0"

    implementation "org.slf4j:slf4j-log4j12"
    implementation "org.slf4j:slf4j-api"

    implementation group: 'io.reactivex.rxjava3', name: 'rxjava', version: '3.0.4'

    implementation 'io.prometheus:simpleclient'

    implementation("com.exactpro.sf:sailfish-core:${sailfishVersion}")

    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.1'
}

test {
    useJUnitPlatform()
}

application {
    mainClassName 'com.exactpro.th2.conn.MicroserviceMain'
}

applicationName = 'service'

distTar {
    archiveName "${applicationName}.tar"
}

dockerPrepare {
    dependsOn distTar
}

docker {
    copySpec.from(tarTree("$buildDir/distributions/${applicationName}.tar"))
}
